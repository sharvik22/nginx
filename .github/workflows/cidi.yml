---
name: Docker Build and Deploy

on:
  push:
    tags:
      - "v*.*.*"

env:
  REGISTRY: docker.io
  IMAGE_NAME: sharvik40/nginx-app
  K8S_DEPLOYMENT: nginx-app-deployment
  K8S_NAMESPACE: default
  CONTAINER_NAME: nginx

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract version tag
        id: extract_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.K8S_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Verify Kubernetes access
        run: |
          kubectl cluster-info --insecure-skip-tls-verify

      - name: Update or create deployment
        run: |
          # Проверяем, существует ли deployment
          if ! kubectl get deployment/${{ env.K8S_DEPLOYMENT }} -n ${{ env.K8S_NAMESPACE }} --insecure-skip-tls-verify; then
            echo "Deployment not found. Creating it..."
            # Создаем временный YAML-файл для развертывания
            cat <<EOF > deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ env.K8S_DEPLOYMENT }}
  namespace: ${{ env.K8S_NAMESPACE }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
        ports:
        - containerPort: 80
EOF
            # Применяем YAML-файл
            kubectl apply -f deployment.yaml --insecure-skip-tls-verify
          else
            echo "Updating existing deployment..."
            # Обновляем образ в существующем deployment
            kubectl set image deployment/${{ env.K8S_DEPLOYMENT }} \
              ${{ env.CONTAINER_NAME }}=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} \
              -n ${{ env.K8S_NAMESPACE }} \
              --insecure-skip-tls-verify
          fi

      - name: Wait for rollout to complete
        run: |
          kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT }} \
            -n ${{ env.K8S_NAMESPACE }} \
            --insecure-skip-tls-verify \
            --timeout=300s

      - name: Verify pods
        run: |
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} \
            -l app=nginx \
            -o jsonpath='{range .items[*]}{.metadata.name}{": "}{.spec.containers[0].image}{"\n"}{end}'
