---
name: Docker Build and Deploy

on:
  push:
    tags:
      - "v*.*.*"

env:
  REGISTRY: docker.io
  IMAGE_NAME: sharvik40/nginx-app
  K8S_DEPLOYMENT: nginx-app-deployment
  K8S_NAMESPACE: default
  CONTAINER_NAME: nginx-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          labels: version=${{ github.ref_name }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: azure/setup-kubectl@v3
      
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.K8S_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Debug cluster info
        run: |
          echo "=== Cluster Info ==="
          kubectl cluster-info --insecure-skip-tls-verify
          echo ""
          echo "=== Nodes ==="
          kubectl get nodes --insecure-skip-tls-verify
          echo ""
          echo "=== Current Deployment ==="
          kubectl get deployment/${{ env.K8S_DEPLOYMENT }} -n ${{ env.K8S_NAMESPACE }} -o wide --insecure-skip-tls-verify
          echo ""
          echo "=== Current Pods ==="
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=nginx-app -o wide --insecure-skip-tls-verify

      - name: Force update deployment
        run: |
          echo "=== Forcing deployment update ==="
          echo "New image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          
          # 1. Устанавливаем Always pull policy
          kubectl patch deployment ${{ env.K8S_DEPLOYMENT }} \
            -n ${{ env.K8S_NAMESPACE }} \
            --patch '{"spec":{"template":{"spec":{"containers":[{"name":"${{ env.CONTAINER_NAME }}","imagePullPolicy":"Always"}]}}}}' \
            --insecure-skip-tls-verify
          
          # 2. Обновляем образ
          kubectl set image deployment/${{ env.K8S_DEPLOYMENT }} \
            ${{ env.CONTAINER_NAME }}=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} \
            -n ${{ env.K8S_NAMESPACE }} \
            --insecure-skip-tls-verify
          
          # 3. Перезапускаем поды
          kubectl rollout restart deployment/${{ env.K8S_DEPLOYMENT }} \
            -n ${{ env.K8S_NAMESPACE }} \
            --insecure-skip-tls-verify

      - name: Verify update
        run: |
          echo "=== Waiting for rollout ==="
          kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT }} \
            -n ${{ env.K8S_NAMESPACE }} \
            --insecure-skip-tls-verify \
            --timeout=300s
          
          echo ""
          echo "=== Updated Pods ==="
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=nginx-app \
            -o jsonpath='{range .items[*]}{.metadata.name}{": "}{.status.phase}{" ("}{.spec.containers[0].image}{")"}{"\n"}{end}' \
            --insecure-skip-tls-verify
          
          echo ""
          echo "=== Pods Details ==="
          kubectl describe pods -n ${{ env.K8S_NAMESPACE }} -l app=nginx-app --insecure-skip-tls-verify

      - name: Final verification
        run: |
          echo "=== Final Deployment State ==="
          kubectl get deployment/${{ env.K8S_DEPLOYMENT }} -n ${{ env.K8S_NAMESPACE }} -o yaml --insecure-skip-tls-verify | grep -A 5 image:
          echo ""
          echo "=== Image Pull Secrets ==="
          kubectl get deployment/${{ env.K8S_DEPLOYMENT }} -n ${{ env.K8S_NAMESPACE }} -o yaml --insecure-skip-tls-verify | grep -A 3 imagePullSecrets
