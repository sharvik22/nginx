---
name: Build, Push and Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/your-app-name
  K8S_NAMESPACE: default
  DEPLOYMENT_NAME: your-deployment-name
  CONTAINER_NAME: your-container-name

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Tag and push versioned image
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:$TAG
        docker push ${{ env.DOCKER_IMAGE }}:$TAG

  deploy:
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - name: Configure kubectl (insecure mode)
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.K8S_CONFIG }}" | base64 --decode > ~/.kube/config
        kubectl config use-context ${{ secrets.K8S_CONTEXT }}
        
        # Verify connection (with TLS verification disabled)
        kubectl --insecure-skip-tls-verify cluster-info
        kubectl --insecure-skip-tls-verify get nodes

    - name: Deploy to Kubernetes
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        
        # Update image in deployment
        kubectl --insecure-skip-tls-verify -n ${{ env.K8S_NAMESPACE }} set image \
          deployment/${{ env.DEPLOYMENT_NAME }} \
          ${{ env.CONTAINER_NAME }}=${{ env.DOCKER_IMAGE }}:$TAG
        
        # Wait for rollout to complete
        kubectl --insecure-skip-tls-verify -n ${{ env.K8S_NAMESPACE }} rollout status \
          deployment/${{ env.DEPLOYMENT_NAME }} --timeout=90s
        
        # Verify deployment
        kubectl --insecure-skip-tls-verify -n ${{ env.K8S_NAMESPACE }} get pods

#name: Docker Build and Deploy
#
#on:
#  push:
#    branches:
#      - "main"
#    tags:
#      - "v*.*.*"
#
#env:
#  REGISTRY: docker.io
#  IMAGE_NAME: sharvik40/nginx-app
#  K8S_NAMESPACE: default
#  K8S_DEPLOYMENT: nginx-app
#
#jobs:
#  build-and-push:
#    name: Build and Push Docker Image
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_HUB_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_TOKEN }}
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Extract metadata
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#          tags: |
#            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
#            type=ref,event=tag
#
#      - name: Build and push
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#
#  deploy-to-k8s:
#    name: Deploy to Kubernetes
#    needs: build-and-push
#    if: startsWith(github.ref, 'refs/tags/v')
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Install kubectl
#        uses: azure/setup-kubectl@v3
#
#      - name: Setup SSH
#        uses: webfactory/ssh-agent@v0.7.0
#        with:
#          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#
#      - name: Add known hosts
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
#
#      - name: Establish SSH tunnel
#        run: |
#          ssh -o StrictHostKeyChecking=no -fN -L 6443:localhost:6443 ubuntu@51.250.87.108 &
#          sleep 10
#          netstat -tulnp | grep 6443 || exit 1
#
#      - name: Configure kubeconfig
#        run: |
#          mkdir -p ~/.kube
#          cat <<EOF > ~/.kube/config
#          apiVersion: v1
#          clusters:
#          - cluster:
#              certificate-authority-data: ${{ secrets.K8S_CA }}
#              server: https://localhost:6443
#            name: yc-cluster
#          contexts:
#          - context:
#              cluster: yc-cluster
#              user: yc-user
#            name: yc-context
#          current-context: yc-context
#          kind: Config
#          users:
#          - name: yc-user
#            user:
#              client-certificate-data: ${{ secrets.K8S_CLIENT_CERT }}
#              client-key-data: ${{ secrets.K8S_CLIENT_KEY }}
#          EOF
#
#      - name: Verify cluster access
#        run: kubectl cluster-info
#
#      - name: Deploy with version tag
#        run: |
#          TAG=${GITHUB_REF#refs/tags/v}
#          kubectl -n ${{ env.K8S_NAMESPACE }} set image \
#            deployment/${{ env.K8S_DEPLOYMENT }} \
#            nginx=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG
#          kubectl rollout status -n ${{ env.K8S_NAMESPACE }} deployment/${{ env.K8S_DEPLOYMENT }}
